// Code generated by MockGen. DO NOT EDIT.
// Source: app/actors/usecase/actor.go

// Package actorusecase is a generated GoMock package.
package actorusecase

import (
	entity "kinopoisk/app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActorUseCase is a mock of ActorUseCase interface.
type MockActorUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockActorUseCaseMockRecorder
}

// MockActorUseCaseMockRecorder is the mock recorder for MockActorUseCase.
type MockActorUseCaseMockRecorder struct {
	mock *MockActorUseCase
}

// NewMockActorUseCase creates a new mock instance.
func NewMockActorUseCase(ctrl *gomock.Controller) *MockActorUseCase {
	mock := &MockActorUseCase{ctrl: ctrl}
	mock.recorder = &MockActorUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorUseCase) EXPECT() *MockActorUseCaseMockRecorder {
	return m.recorder
}

// GetActorByID mocks base method.
func (m *MockActorUseCase) GetActorByID(ID uint64) (*entity.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorByID", ID)
	ret0, _ := ret[0].(*entity.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorByID indicates an expected call of GetActorByID.
func (mr *MockActorUseCaseMockRecorder) GetActorByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorByID", reflect.TypeOf((*MockActorUseCase)(nil).GetActorByID), ID)
}

// GetActors mocks base method.
func (m *MockActorUseCase) GetActors() ([]*entity.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors")
	ret0, _ := ret[0].([]*entity.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorUseCaseMockRecorder) GetActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorUseCase)(nil).GetActors))
}
