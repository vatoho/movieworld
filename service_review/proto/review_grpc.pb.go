// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package review

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewMakerClient is the client API for ReviewMaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewMakerClient interface {
	GetFilmReviews(ctx context.Context, in *FilmID, opts ...grpc.CallOption) (*Reviews, error)
	NewReview(ctx context.Context, in *NewReviewData, opts ...grpc.CallOption) (*Review, error)
	DeleteReview(ctx context.Context, in *DeleteReviewData, opts ...grpc.CallOption) (*DeletedData, error)
	UpdateReview(ctx context.Context, in *UpdateReviewData, opts ...grpc.CallOption) (*Review, error)
}

type reviewMakerClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewMakerClient(cc grpc.ClientConnInterface) ReviewMakerClient {
	return &reviewMakerClient{cc}
}

func (c *reviewMakerClient) GetFilmReviews(ctx context.Context, in *FilmID, opts ...grpc.CallOption) (*Reviews, error) {
	out := new(Reviews)
	err := c.cc.Invoke(ctx, "/review.ReviewMaker/GetFilmReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewMakerClient) NewReview(ctx context.Context, in *NewReviewData, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, "/review.ReviewMaker/NewReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewMakerClient) DeleteReview(ctx context.Context, in *DeleteReviewData, opts ...grpc.CallOption) (*DeletedData, error) {
	out := new(DeletedData)
	err := c.cc.Invoke(ctx, "/review.ReviewMaker/DeleteReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewMakerClient) UpdateReview(ctx context.Context, in *UpdateReviewData, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, "/review.ReviewMaker/UpdateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewMakerServer is the server API for ReviewMaker service.
// All implementations must embed UnimplementedReviewMakerServer
// for forward compatibility
type ReviewMakerServer interface {
	GetFilmReviews(context.Context, *FilmID) (*Reviews, error)
	NewReview(context.Context, *NewReviewData) (*Review, error)
	DeleteReview(context.Context, *DeleteReviewData) (*DeletedData, error)
	UpdateReview(context.Context, *UpdateReviewData) (*Review, error)
	mustEmbedUnimplementedReviewMakerServer()
}

// UnimplementedReviewMakerServer must be embedded to have forward compatible implementations.
type UnimplementedReviewMakerServer struct {
}

func (UnimplementedReviewMakerServer) GetFilmReviews(context.Context, *FilmID) (*Reviews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilmReviews not implemented")
}
func (UnimplementedReviewMakerServer) NewReview(context.Context, *NewReviewData) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewReview not implemented")
}
func (UnimplementedReviewMakerServer) DeleteReview(context.Context, *DeleteReviewData) (*DeletedData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReview not implemented")
}
func (UnimplementedReviewMakerServer) UpdateReview(context.Context, *UpdateReviewData) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedReviewMakerServer) mustEmbedUnimplementedReviewMakerServer() {}

// UnsafeReviewMakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewMakerServer will
// result in compilation errors.
type UnsafeReviewMakerServer interface {
	mustEmbedUnimplementedReviewMakerServer()
}

func RegisterReviewMakerServer(s grpc.ServiceRegistrar, srv ReviewMakerServer) {
	s.RegisterService(&ReviewMaker_ServiceDesc, srv)
}

func _ReviewMaker_GetFilmReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewMakerServer).GetFilmReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewMaker/GetFilmReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewMakerServer).GetFilmReviews(ctx, req.(*FilmID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewMaker_NewReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewReviewData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewMakerServer).NewReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewMaker/NewReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewMakerServer).NewReview(ctx, req.(*NewReviewData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewMaker_DeleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReviewData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewMakerServer).DeleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewMaker/DeleteReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewMakerServer).DeleteReview(ctx, req.(*DeleteReviewData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewMaker_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReviewData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewMakerServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.ReviewMaker/UpdateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewMakerServer).UpdateReview(ctx, req.(*UpdateReviewData))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewMaker_ServiceDesc is the grpc.ServiceDesc for ReviewMaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewMaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "review.ReviewMaker",
	HandlerType: (*ReviewMakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilmReviews",
			Handler:    _ReviewMaker_GetFilmReviews_Handler,
		},
		{
			MethodName: "NewReview",
			Handler:    _ReviewMaker_NewReview_Handler,
		},
		{
			MethodName: "DeleteReview",
			Handler:    _ReviewMaker_DeleteReview_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _ReviewMaker_UpdateReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "review.proto",
}
